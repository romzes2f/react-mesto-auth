{"ast":null,"code":"const BASE_URL = \"https://auth.nomoreparties.co\";\nfunction checkResponse(res) {\n  if (res.ok) {\n    return res.json();\n  }\n  return Promise.reject(`${res.status}`);\n}\nexport const registerUser = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email: email,\n      password: password\n    })\n  }).then(checkResponse);\n};\nexport const loginUser = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email: email,\n      password: password\n    })\n  }).then(checkResponse).then(data => {\n    if (data.token) {\n      localStorage.setItem(\"jwt\", data.token);\n      return data;\n    }\n  });\n};\nexport const checkToken = jwt => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${jwt}`\n    }\n  }).then(checkResponse);\n};","map":{"version":3,"names":["BASE_URL","checkResponse","res","ok","json","Promise","reject","status","registerUser","email","password","fetch","method","headers","Accept","body","JSON","stringify","then","loginUser","data","token","localStorage","setItem","checkToken","jwt","Authorization"],"sources":["/Users/roman/Documents/Я.Практикум/Projects/react-mesto-auth/src/utils/auth.js"],"sourcesContent":["const BASE_URL = \"https://auth.nomoreparties.co\"\n\nfunction checkResponse(res) {\n  if (res.ok) {\n    return res.json()\n  }\n  return Promise.reject(`${res.status}`)\n}\n\nexport const registerUser = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      email: email,\n      password: password,\n    }),\n  }).then(checkResponse)\n}\n\nexport const loginUser = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      email: email,\n      password: password,\n    }),\n  })\n    .then(checkResponse)\n    .then((data) => {\n      if (data.token) {\n        localStorage.setItem(\"jwt\", data.token)\n        return data\n      }\n    })\n}\n\nexport const checkToken = (jwt) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${jwt}`,\n    },\n  }).then(checkResponse)\n}\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,+BAA+B;AAEhD,SAASC,aAAaA,CAACC,GAAG,EAAE;EAC1B,IAAIA,GAAG,CAACC,EAAE,EAAE;IACV,OAAOD,GAAG,CAACE,IAAI,CAAC,CAAC;EACnB;EACA,OAAOC,OAAO,CAACC,MAAM,CAAE,GAAEJ,GAAG,CAACK,MAAO,EAAC,CAAC;AACxC;AAEA,OAAO,MAAMC,YAAY,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EAC/C,OAAOC,KAAK,CAAE,GAAEX,QAAS,SAAQ,EAAE;IACjCY,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBR,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA;IACZ,CAAC;EACH,CAAC,CAAC,CAACQ,IAAI,CAACjB,aAAa,CAAC;AACxB,CAAC;AAED,OAAO,MAAMkB,SAAS,GAAGA,CAACV,KAAK,EAAEC,QAAQ,KAAK;EAC5C,OAAOC,KAAK,CAAE,GAAEX,QAAS,SAAQ,EAAE;IACjCY,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDE,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBR,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA;IACZ,CAAC;EACH,CAAC,CAAC,CACCQ,IAAI,CAACjB,aAAa,CAAC,CACnBiB,IAAI,CAAEE,IAAI,IAAK;IACd,IAAIA,IAAI,CAACC,KAAK,EAAE;MACdC,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEH,IAAI,CAACC,KAAK,CAAC;MACvC,OAAOD,IAAI;IACb;EACF,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAMI,UAAU,GAAIC,GAAG,IAAK;EACjC,OAAOd,KAAK,CAAE,GAAEX,QAAS,WAAU,EAAE;IACnCY,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCa,aAAa,EAAG,UAASD,GAAI;IAC/B;EACF,CAAC,CAAC,CAACP,IAAI,CAACjB,aAAa,CAAC;AACxB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}