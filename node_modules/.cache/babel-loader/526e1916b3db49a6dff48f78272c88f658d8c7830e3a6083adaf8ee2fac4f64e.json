{"ast":null,"code":"import _regeneratorRuntime from\"/Users/roman/Documents/\\u042F.\\u041F\\u0440\\u0430\\u043A\\u0442\\u0438\\u043A\\u0443\\u043C/Projects/mesto-react/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/roman/Documents/\\u042F.\\u041F\\u0440\\u0430\\u043A\\u0442\\u0438\\u043A\\u0443\\u043C/Projects/mesto-react/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _classCallCheck from\"/Users/roman/Documents/\\u042F.\\u041F\\u0440\\u0430\\u043A\\u0442\\u0438\\u043A\\u0443\\u043C/Projects/mesto-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/roman/Documents/\\u042F.\\u041F\\u0440\\u0430\\u043A\\u0442\\u0438\\u043A\\u0443\\u043C/Projects/mesto-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";var Api=/*#__PURE__*/function(){function Api(_ref){var baseUrl=_ref.baseUrl,headers=_ref.headers;_classCallCheck(this,Api);this._baseUrl=baseUrl;this._headers=headers;}_createClass(Api,[{key:\"_checkResponse\",value:function _checkResponse(res){if(res.ok){return res.json();}else{return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \".concat(res.status));}}},{key:\"getUserInfo\",value:function(){var _getUserInfo=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var idData;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"\".concat(this._baseUrl,\"/users/me\"),{method:'GET',headers:this._headers});case 2:idData=_context.sent;return _context.abrupt(\"return\",this._checkResponse(idData));case 4:case\"end\":return _context.stop();}},_callee,this);}));function getUserInfo(){return _getUserInfo.apply(this,arguments);}return getUserInfo;}()},{key:\"getCards\",value:function(){var _getCards=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){var cardsData;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:_context2.next=2;return fetch(\"\".concat(this._baseUrl,\"/cards\"),{method:'GET',headers:this._headers});case 2:cardsData=_context2.sent;return _context2.abrupt(\"return\",this._checkResponse(cardsData));case 4:case\"end\":return _context2.stop();}},_callee2,this);}));function getCards(){return _getCards.apply(this,arguments);}return getCards;}()// async postCard(cardData) {\n//     try {\n//         const newCardData = await fetch(`${this._baseUrl}/cards`, {\n//             method: 'POST',\n//             headers: this._headers,\n//             body: JSON.stringify({\n//                 name: cardData.title,\n//                 link: cardData.link\n//               })\n//         });\n//         return newCardData.json();\n//     } catch(err) {\n//         console.error('Ошибка отправки новой карточки : ', err);\n//     }\n// } \n// async updateProfile(inputValues) {\n//     try {\n//         const newProfileData = await fetch(`${this._baseUrl}/users/me`, {\n//             method: 'PATCH',\n//             headers: this._headers,\n//             body: JSON.stringify({\n//                 name: inputValues.title,\n//                 about: inputValues.caption\n//               })\n//         });\n//         return newProfileData.json();\n//     } catch(err) {\n//         console.error('Ошибка обновления данных профиля: ', err);\n//     }\n// }\n// async updateAvatar(inputValue) {\n//     try {\n//         const newAvatar = await fetch(`${this._baseUrl}/users/me/avatar`, {\n//             method: 'PATCH',\n//             headers: this._headers,\n//             body: JSON.stringify({\n//                 avatar: inputValue.avatar\n//               })\n//         });\n//         return newAvatar.json();\n//     } catch(err) {\n//         console.error('Ошибка обновления аватара: ', err);\n//     }\n// }\n// async putLike(cardId) {\n//     try {\n//         const countLike = await fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n//             method: 'PUT',\n//             headers: this._headers\n//         });\n//         return countLike.json();\n//     } catch(err) {\n//         console.error('Ошибка сервера при постановке лайка: ', err);\n//     }\n// }\n// async deleteLike(cardId) {\n//     try {\n//         const countLike = await fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n//             method: 'DELETE',\n//             headers: this._headers\n//         });\n//         return countLike.json();\n//     } catch(err) {\n//         console.error('Ошибка сервера при удалении лайка: ', err);\n//     }\n// }\n// async deleteCard(cardId) {\n//     try {\n//         const cardDelete = await fetch(`${this._baseUrl}/cards/${cardId}`, {\n//             method: 'DELETE',\n//             headers: this._headers\n//         });\n//         return cardDelete.json();\n//     } catch(err) {\n//         console.error('Ошибка удаления карточки: ', err);\n//     }\n// }\n}]);return Api;}();var api=new Api({baseUrl:'https://mesto.nomoreparties.co/v1/cohort-68',headers:{authorization:'cad6e116-edab-4c4b-8149-8b724d78ff63','Content-Type':'application/json'}});export default api;","map":{"version":3,"names":["Api","_ref","baseUrl","headers","_classCallCheck","_baseUrl","_headers","_createClass","key","value","_checkResponse","res","ok","json","Promise","reject","concat","status","_getUserInfo","_asyncToGenerator","_regeneratorRuntime","mark","_callee","idData","wrap","_callee$","_context","prev","next","fetch","method","sent","abrupt","stop","getUserInfo","apply","arguments","_getCards","_callee2","cardsData","_callee2$","_context2","getCards","api","authorization"],"sources":["/Users/roman/Documents/Я.Практикум/Projects/mesto-react/src/utils/api.js"],"sourcesContent":["class Api {\n  constructor( { baseUrl, headers } ) {\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка ${res.status}`);\n    }\n  }\n\n  async getUserInfo() {\n    const idData = await fetch(`${this._baseUrl}/users/me`, {\n      method: 'GET',\n      headers: this._headers\n    });\n    return this._checkResponse(idData);\n  }\n\n  async getCards() {\n    const cardsData = await fetch(`${this._baseUrl}/cards`, {\n      method: 'GET',\n      headers: this._headers\n    });\n    return this._checkResponse(cardsData);\n  }    \n\n// async postCard(cardData) {\n//     try {\n//         const newCardData = await fetch(`${this._baseUrl}/cards`, {\n//             method: 'POST',\n//             headers: this._headers,\n//             body: JSON.stringify({\n//                 name: cardData.title,\n//                 link: cardData.link\n//               })\n//         });\n//         return newCardData.json();\n//     } catch(err) {\n//         console.error('Ошибка отправки новой карточки : ', err);\n//     }\n// } \n\n// async updateProfile(inputValues) {\n//     try {\n//         const newProfileData = await fetch(`${this._baseUrl}/users/me`, {\n//             method: 'PATCH',\n//             headers: this._headers,\n//             body: JSON.stringify({\n//                 name: inputValues.title,\n//                 about: inputValues.caption\n//               })\n//         });\n//         return newProfileData.json();\n//     } catch(err) {\n//         console.error('Ошибка обновления данных профиля: ', err);\n//     }\n// }\n\n// async updateAvatar(inputValue) {\n//     try {\n//         const newAvatar = await fetch(`${this._baseUrl}/users/me/avatar`, {\n//             method: 'PATCH',\n//             headers: this._headers,\n//             body: JSON.stringify({\n//                 avatar: inputValue.avatar\n//               })\n//         });\n//         return newAvatar.json();\n//     } catch(err) {\n//         console.error('Ошибка обновления аватара: ', err);\n//     }\n// }\n\n// async putLike(cardId) {\n//     try {\n//         const countLike = await fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n//             method: 'PUT',\n//             headers: this._headers\n//         });\n//         return countLike.json();\n//     } catch(err) {\n//         console.error('Ошибка сервера при постановке лайка: ', err);\n//     }\n// }\n\n// async deleteLike(cardId) {\n//     try {\n//         const countLike = await fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n//             method: 'DELETE',\n//             headers: this._headers\n//         });\n//         return countLike.json();\n//     } catch(err) {\n//         console.error('Ошибка сервера при удалении лайка: ', err);\n//     }\n// }\n\n// async deleteCard(cardId) {\n//     try {\n//         const cardDelete = await fetch(`${this._baseUrl}/cards/${cardId}`, {\n//             method: 'DELETE',\n//             headers: this._headers\n//         });\n//         return cardDelete.json();\n//     } catch(err) {\n//         console.error('Ошибка удаления карточки: ', err);\n//     }\n// }\n}\n\nconst api = new Api( {\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-68',\n  headers: {\n    authorization: 'cad6e116-edab-4c4b-8149-8b724d78ff63',\n    'Content-Type': 'application/json' \n  }\n});\n\nexport default api\n"],"mappings":"6wBAAM,CAAAA,GAAG,yBACP,SAAAA,IAAAC,IAAA,CAAoC,IAArB,CAAAC,OAAO,CAAAD,IAAA,CAAPC,OAAO,CAAEC,OAAO,CAAAF,IAAA,CAAPE,OAAO,CAAAC,eAAA,MAAAJ,GAAA,EAC7B,IAAI,CAACK,QAAQ,CAAGH,OAAO,CACvB,IAAI,CAACI,QAAQ,CAAGH,OAAO,CACzB,CAACI,YAAA,CAAAP,GAAA,GAAAQ,GAAA,kBAAAC,KAAA,CAED,SAAAC,eAAeC,GAAG,CAAE,CAClB,GAAIA,GAAG,CAACC,EAAE,CAAE,CACV,MAAO,CAAAD,GAAG,CAACE,IAAI,CAAC,CAAC,CACnB,CAAC,IAAM,CACL,MAAO,CAAAC,OAAO,CAACC,MAAM,yCAAAC,MAAA,CAAWL,GAAG,CAACM,MAAM,CAAE,CAAC,CAC/C,CACF,CAAC,GAAAT,GAAA,eAAAC,KAAA,gBAAAS,YAAA,CAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAC,QAAA,MAAAC,MAAA,QAAAH,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA,iBAAAA,QAAA,CAAAC,IAAA,CAAAD,QAAA,CAAAE,IAAA,SAAAF,QAAA,CAAAE,IAAA,SACuB,CAAAC,KAAK,IAAAb,MAAA,CAAI,IAAI,CAACX,QAAQ,cAAa,CACtDyB,MAAM,CAAE,KAAK,CACb3B,OAAO,CAAE,IAAI,CAACG,QAChB,CAAC,CAAC,QAHIiB,MAAM,CAAAG,QAAA,CAAAK,IAAA,QAAAL,QAAA,CAAAM,MAAA,UAIL,IAAI,CAACtB,cAAc,CAACa,MAAM,CAAC,0BAAAG,QAAA,CAAAO,IAAA,MAAAX,OAAA,QACnC,YAAAY,YAAA,SAAAhB,YAAA,CAAAiB,KAAA,MAAAC,SAAA,UAAAF,WAAA,OAAA1B,GAAA,YAAAC,KAAA,gBAAA4B,SAAA,CAAAlB,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAiB,SAAA,MAAAC,SAAA,QAAAnB,mBAAA,GAAAI,IAAA,UAAAgB,UAAAC,SAAA,iBAAAA,SAAA,CAAAd,IAAA,CAAAc,SAAA,CAAAb,IAAA,SAAAa,SAAA,CAAAb,IAAA,SAC0B,CAAAC,KAAK,IAAAb,MAAA,CAAI,IAAI,CAACX,QAAQ,WAAU,CACtDyB,MAAM,CAAE,KAAK,CACb3B,OAAO,CAAE,IAAI,CAACG,QAChB,CAAC,CAAC,QAHIiC,SAAS,CAAAE,SAAA,CAAAV,IAAA,QAAAU,SAAA,CAAAT,MAAA,UAIR,IAAI,CAACtB,cAAc,CAAC6B,SAAS,CAAC,0BAAAE,SAAA,CAAAR,IAAA,MAAAK,QAAA,QACtC,YAAAI,SAAA,SAAAL,SAAA,CAAAF,KAAA,MAAAC,SAAA,UAAAM,QAAA,IAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,WAAA1C,GAAA,KAGA,GAAM,CAAA2C,GAAG,CAAG,GAAI,CAAA3C,GAAG,CAAE,CACnBE,OAAO,CAAE,6CAA6C,CACtDC,OAAO,CAAE,CACPyC,aAAa,CAAE,sCAAsC,CACrD,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF,cAAe,CAAAD,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}