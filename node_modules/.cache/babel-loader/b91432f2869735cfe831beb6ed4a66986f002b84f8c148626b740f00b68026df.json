{"ast":null,"code":"class Api {\n  constructor(config) {\n    // тело конструктора\n    this._url = config.baseUrl;\n    this._headers = config.headers;\n  }\n  _getResponseData(response) {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(`Ошибка: ${response.status}`);\n  }\n  _getInitialCards() {\n    return fetch('https://mesto.nomoreparties.co/v1/cohort-64/cards', {\n      headers: {\n        authorization: '68cde520-ac6c-40b9-a1ad-21ed7cb7863b'\n      }\n    }).then(this._getResponseData);\n  }\n  _getUserInfo() {\n    return fetch(`${this._url}/users/me`, {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._getResponseData);\n  }\n  getNeededAll() {\n    return Promise.all([this._getUserInfo(), this._getInitialCards()]);\n  }\n  patchUserInfo(_ref) {\n    let {\n      name,\n      about\n    } = _ref;\n    return fetch(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    }).then(this._getResponseData);\n  }\n  createNewCard(formValues) {\n    return fetch(`${this._url}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: formValues.place,\n        link: formValues.link\n      })\n    }).then(this._getResponseData);\n  }\n  deleteCard(cardId) {\n    return fetch(`${this._url}${\"/cards/\"}${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._getResponseData);\n  }\n  putLike(cardId) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: this._headers\n    }).then(this._getResponseData);\n  }\n  deleteLike(cardId) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._getResponseData);\n  }\n  patchAvatar(avatar) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: avatar\n      })\n    }).then(this._getResponseData);\n  }\n}\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-64',\n  headers: {\n    authorization: '68cde520-ac6c-40b9-a1ad-21ed7cb7863b',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","config","_url","baseUrl","_headers","headers","_getResponseData","response","ok","json","Promise","reject","status","_getInitialCards","fetch","authorization","then","_getUserInfo","method","getNeededAll","all","patchUserInfo","_ref","name","about","body","JSON","stringify","createNewCard","formValues","place","link","deleteCard","cardId","putLike","deleteLike","patchAvatar","avatar","api"],"sources":["/Users/roman/Documents/Я.Практикум/Projects/mesto-react/src/utils/Api.js"],"sourcesContent":["class Api {\n    constructor(config) {\n        // тело конструктора\n        this._url = config.baseUrl;\n        this._headers = config.headers;\n      }\n\n    _getResponseData(response) {\n      if (response.ok) {\n        return response.json();\n      }\n      return Promise.reject(`Ошибка: ${response.status}`);\n    }\n    \n      _getInitialCards() {\n        return fetch('https://mesto.nomoreparties.co/v1/cohort-64/cards', {\n        headers: {\n        authorization: '68cde520-ac6c-40b9-a1ad-21ed7cb7863b'\n        }\n     })\n         .then(this._getResponseData);\n    }\n   \n      _getUserInfo() {\n        return fetch(`${this._url}/users/me`, {\n          method: 'GET',\n          headers: this._headers\n        })\n          .then(this._getResponseData);\n      }\n\n      getNeededAll() {\n        return Promise.all([this._getUserInfo(), this._getInitialCards()]);\n      }\n\n      patchUserInfo({name, about}) {\n        return fetch(`${this._url}/users/me`, {\n          method: 'PATCH',\n          headers: this._headers,\n          body: JSON.stringify({\n            name: name,\n            about: about\n          })\n        })\n        .then(this._getResponseData);\n      }\n    \n      createNewCard(formValues) {\n        return fetch(`${this._url}/cards`, {\n          method: 'POST',\n          headers: this._headers,\n          body: JSON.stringify({\n            name: formValues.place,\n            link: formValues.link\n          })\n        })\n        .then(this._getResponseData);\n      }\n    \n      deleteCard(cardId) {\n        return fetch(`${this._url}${\"/cards/\"}${cardId}`, {\n          method: 'DELETE',\n          headers: this._headers\n        })\n        .then(this._getResponseData);\n      }\n    \n      putLike(cardId) {\n        return fetch(`${this._url}/cards/${cardId}/likes`, {\n          method: 'PUT',\n          headers: this._headers\n        })\n        .then(this._getResponseData);\n      }\n    \n      deleteLike(cardId) {\n        return fetch(`${this._url}/cards/${cardId}/likes`, {\n          method: 'DELETE',\n          headers: this._headers\n        })\n        .then(this._getResponseData);\n      }\n    \n      patchAvatar(avatar) {\n        return fetch(`${this._url}/users/me/avatar`, {\n          method: 'PATCH',\n          headers: this._headers,\n          body: JSON.stringify({\n            avatar: avatar\n          })\n        })\n        .then(this._getResponseData);\n      }\n}\n\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-64',\n  headers: {\n    authorization: '68cde520-ac6c-40b9-a1ad-21ed7cb7863b',\n    'Content-Type': 'application/json'\n  }\n});\n\n\nexport default api;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}