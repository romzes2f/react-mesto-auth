{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._url = options.baseUrl;\n    this._headers = options.headers;\n    this._authorization = this._headers.authorization;\n  }\n  _getResponseData(res) {\n    if (!res.ok) {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n    return res.json();\n  }\n  getInitialCards() {\n    return fetch(`${this._url}/cards`, {\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(this._getResponseData);\n  }\n  getUserInfo() {\n    return fetch(`${this._url}/users/me`, {\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(this._getResponseData);\n  }\n  setUserInfo(info) {\n    return fetch(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: info.name,\n        about: info.description\n      })\n    }).then(this._getResponseData);\n  }\n  setUserAvatar(urlAvatar) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: urlAvatar.avatar\n      })\n    }).then(this._getResponseData);\n  }\n  addCard(info) {\n    return fetch(`${this._url}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: info.name,\n        link: info.link\n      })\n    }).then(this._getResponseData);\n  }\n  deleteCard(cardId) {\n    return fetch(`${this._url}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(this._getResponseData);\n  }\n  putLike(cardId) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(this._getResponseData);\n  }\n  deleteLike(cardId) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(this._getResponseData);\n  }\n}\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-66',\n  headers: {\n    authorization: '19e8582c-87a0-4169-b9b7-3f64cd5f6ca3',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","options","_url","baseUrl","_headers","headers","_authorization","authorization","_getResponseData","res","ok","Promise","reject","status","json","getInitialCards","fetch","then","getUserInfo","setUserInfo","info","method","body","JSON","stringify","name","about","description","setUserAvatar","urlAvatar","avatar","addCard","link","deleteCard","cardId","putLike","deleteLike","api"],"sources":["/Users/roman/Documents/Я.Практикум/Projects/mesto-react/src/utils/api.js"],"sourcesContent":["class Api{\n    constructor(options){\n        this._url = options.baseUrl;\n        this._headers=options.headers;\n        this._authorization= this._headers.authorization;\n    }\n    _getResponseData(res){\n        if (!res.ok) {\n            return Promise.reject(`Ошибка: ${res.status}`);\n        }\n        return res.json();\n    }\n    getInitialCards() {\n        return fetch(`${this._url}/cards`,{\n            headers: {\n                authorization: this._authorization\n            }\n        })\n            .then(this._getResponseData);\n    }\n    getUserInfo(){\n        return fetch(`${this._url}/users/me`, {\n            headers: {\n                authorization: this._authorization\n            }\n        })\n            .then(this._getResponseData);\n    }\n    setUserInfo(info){\n        return fetch(`${this._url}/users/me`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: info.name,\n                about: info.description \n              })\n        })\n            .then(this._getResponseData);\n    }\n    setUserAvatar(urlAvatar){\n        return fetch(`${this._url}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                avatar: urlAvatar.avatar,\n              })\n        })\n            .then(this._getResponseData);\n    }\n    addCard(info){\n        return fetch(`${this._url}/cards`, {\n            method: 'POST',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: info.name,\n                link: info.link\n              })\n        })\n            .then(this._getResponseData);\n    }\n    deleteCard(cardId){\n        return fetch(`${this._url}/cards/${cardId}`, {\n            method: 'DELETE',\n            headers: {\n                authorization: this._authorization\n            }\n        })\n            .then(this._getResponseData);\n    }\n\n    putLike(cardId){\n        return fetch(`${this._url}/cards/${cardId}/likes`, {\n            method: 'PUT',\n            headers: {\n                authorization: this._authorization\n            }\n        })\n            .then(this._getResponseData);\n    }\n    deleteLike(cardId){\n        return fetch(`${this._url}/cards/${cardId}/likes`, {\n            method: 'DELETE',\n            headers: {\n                authorization: this._authorization\n            }\n        })\n            .then(this._getResponseData);\n    }\n}\nconst api = new Api({\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-66',\n    headers: {\n      authorization: '19e8582c-87a0-4169-b9b7-3f64cd5f6ca3',\n      'Content-Type': 'application/json'\n    }\n  });\nexport default api;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}