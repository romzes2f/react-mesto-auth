{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n    this._authorization = options.headers.authorization;\n  }\n  _getResponseData(res) {\n    if (!res.ok) {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n    return res.json();\n  }\n  getUserInfo() {\n    return fetch(this._baseUrl + '/users/me', {\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(this._getResponseData);\n  }\n  getInitialCards() {\n    return fetch(this._baseUrl + '/cards', {\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(this._getResponseData);\n  }\n  setUserInfo(data) {\n    return fetch(this._baseUrl + '/users/me', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.job\n      })\n    }).then(this._getResponseData);\n  }\n  createNewCard(name, link) {\n    return fetch(this._baseUrl + '/cards', {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        link\n      })\n    }).then(this._getResponseData);\n  }\n  deleteCard(cardId) {\n    return fetch(this._baseUrl + '/cards/' + cardId, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(this._getResponseData);\n  }\n  addLike(cardId) {\n    return fetch(this._baseUrl + '/cards/' + cardId + '/likes', {\n      method: 'PUT',\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(this._getResponseData);\n  }\n  deleteLike(cardId) {\n    return fetch(this._baseUrl + '/cards/' + cardId + '/likes', {\n      method: 'DELETE',\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(this._getResponseData);\n  }\n  updateUserAvatar(avatar) {\n    return fetch(this._baseUrl + '/users/me/avatar', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar\n      })\n    }).then(this._getResponseData);\n  }\n}\nexport const api = new Api({\n  baseUrl: 'https://nomoreparties.co/v1/cohort-68',\n  headers: {\n    authorization: '5e341264-ca7e-4fb2-b0c7-97939544a65a',\n    'Content-Type': 'application/json'\n  }\n});","map":{"version":3,"names":["Api","constructor","options","_baseUrl","baseUrl","_headers","headers","_authorization","authorization","_getResponseData","res","ok","Promise","reject","status","json","getUserInfo","fetch","then","getInitialCards","setUserInfo","data","method","body","JSON","stringify","name","about","job","createNewCard","link","deleteCard","cardId","addLike","deleteLike","updateUserAvatar","avatar","api"],"sources":["/Users/roman/Documents/Я.Практикум/Projects/mesto-react/src/utils/api.js"],"sourcesContent":["class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n    this._authorization = options.headers.authorization;\n  }\n\n  _getResponseData(res) {\n    if (!res.ok) {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n    return res.json();\n  }\n\n  getUserInfo() {\n    return fetch(this._baseUrl + '/users/me', {\n      headers: {\n        authorization: this._authorization,\n      }\n    })\n      .then(this._getResponseData);\n  };\n\n  getInitialCards() {\n    return fetch(this._baseUrl + '/cards', {\n      headers: {\n        authorization: this._authorization,\n      }\n    })\n      .then(this._getResponseData);\n  };\n\n  setUserInfo(data) {\n    return fetch(this._baseUrl + '/users/me', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.job,\n      })\n    })\n      .then(this._getResponseData);\n  }\n\n  createNewCard(name, link) {\n    return fetch(this._baseUrl + '/cards', {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        link\n      })\n    })\n      .then(this._getResponseData);\n  };\n\n\n  deleteCard(cardId) {\n    return fetch(this._baseUrl + '/cards/' + cardId, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._authorization,\n      },\n    })\n      .then(this._getResponseData);\n  };\n\n  addLike(cardId) {\n    return fetch(this._baseUrl + '/cards/' + cardId + '/likes', {\n      method: 'PUT',\n      headers: {\n        authorization: this._authorization,\n      },\n    })\n      .then(this._getResponseData);\n  }\n\n  deleteLike(cardId) {\n    return fetch(this._baseUrl + '/cards/' + cardId + '/likes', {\n      method: 'DELETE',\n      headers: {\n        authorization: this._authorization,\n      },\n    })\n      .then(this._getResponseData);\n  }\n\n  updateUserAvatar(avatar) {\n    return fetch(this._baseUrl + '/users/me/avatar', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar\n      })\n    })\n      .then(this._getResponseData);\n  }\n\n}\n\nexport const api = new Api({\n  baseUrl: 'https://nomoreparties.co/v1/cohort-68',\n  headers: {\n    authorization: '5e341264-ca7e-4fb2-b0c7-97939544a65a',\n    'Content-Type': 'application/json'\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}